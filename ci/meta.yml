meta:
  plan:
    terraform-common-config:
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: ((dataworks.terraform_repository))
            tag: ((dataworks.terraform_version))
        params:
          TF_INPUT: false
          AWS_REGION: ((dataworks.aws_region))
          TF_CLI_ARGS_apply: -lock-timeout=300s
          TF_CLI_ARGS_plan: -lock-timeout=300s

    terraform-bootstrap:
      task: terraform-bootstrap
      .: (( inject meta.plan.terraform-common-config ))
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: dwpdigital/jinja-yaml-aws
            version: 0.0.19
            tag: 0.0.19
        run:
          path: sh
          args:
            - -exc
            - |
              if [ -f ../previous_success/exit-if-succeeded.sh ]; then
                source ../previous_success/exit-if-succeeded.sh
              fi
              python bootstrap_terraform.py
              sed -i '/^assume_role/ d' terraform.tfvars
              cp terraform.tf ../terraform-config
              cp terraform.tfvars ../terraform-config
          dir: dataworks-aws-corporate-data-ingestion
        inputs:
          - name: dataworks-aws-corporate-data-ingestion
        outputs:
          - name: terraform-config
      params:
        AWS_REGION: eu-west-2

    terraform-apply:
      task: terraform-apply
      .: (( inject meta.plan.terraform-common-config ))
      config:
        platform: linux
        run:
          path: sh
          dir: dataworks-aws-corporate-data-ingestion
          args:
            - -exc
            - |
              if [ -f ../previous_success/exit-if-succeeded.sh ]; then
                source ../previous_success/exit-if-succeeded.sh
              fi
              export TF_VAR_emr_ami_id=$(cat ../al2-emr-ami/id)
              cp ../terraform-config/terraform.tf .
              cp ../terraform-config/terraform.tfvars .
              export TF_VAR_emr_launcher_zip="{base_path = \"../emr-launcher-release\", version = \"$(cat ../emr-launcher-release/version)\"}"
              export TF_VAR_dataworks_emr_relauncher_zip="{base_path = \"../emr-relauncher-release\", version = \"$(cat ../emr-relauncher-release/version)\"}"
              terraform workspace show
              terraform init
              terraform plan -out terraform.plan
              terraform apply -auto-approve terraform.plan
        inputs:
          - name: dataworks-aws-corporate-data-ingestion
          - name: terraform-config
          - name: emr-launcher-release
          - name: al2-emr-ami
          - name: emr-relauncher-release

    terraform-plan:
      task: terraform-plan
      .: (( inject meta.plan.terraform-common-config ))
      config:
        platform: linux
        run:
          path: sh
          args:
            - -exc
            - |
              if [ -f ../previous_success/exit-if-succeeded.sh ]; then
                source ../previous_success/exit-if-succeeded.sh
              fi
              export TF_VAR_emr_ami_id=$(cat ../al2-emr-ami/id)
              cp ../terraform-config/terraform.tf .
              cp ../terraform-config/terraform.tfvars .
              export TF_VAR_emr_launcher_zip="{base_path = \"../emr-launcher-release\", version = \"$(cat ../emr-launcher-release/version)\"}"
              export TF_VAR_dataworks_emr_relauncher_zip="{base_path = \"../emr-relauncher-release\", version = \"$(cat ../emr-relauncher-release/version)\"}"
              terraform workspace show
              terraform init
              terraform plan $DETAILED_EXITCODE
          dir: dataworks-aws-corporate-data-ingestion
        inputs:
          - name: dataworks-aws-corporate-data-ingestion
          - name: terraform-config
          - name: emr-launcher-release
          - name: al2-emr-ami
          - name: emr-relauncher-release
      params:
        DETAILED_EXITCODE: -detailed-exitcode

    terraform-output:
      task: terraform-output
      .: (( inject meta.plan.terraform-common-config ))
      config:
        run:
          path: sh
          args:
            - -exc
            - |
              cp ../terraform-config/terraform.tf .
              terraform workspace show
              terraform init
              terraform output --json > ../terraform-output/outputs.json
          dir: dataworks-aws-corporate-data-ingestion
        inputs:
          - name: dataworks-aws-corporate-data-ingestion
          - name: terraform-config
        outputs:
          - name: terraform-output

    e2e-tests:
      task: e2e-tests
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: ((dataworks.docker_python_boto_behave_repository))
            tag: ((dataworks.docker_python_boto_behave_version))
        params:
          AWS_DEFAULT_REGION: ((dataworks.aws_region))
          NUMBER_OF_TOPICS_TO_USE: "3"
          E2E_TEST_TIMEOUT: 7200
          E2E_FEATURE_TAG_FILTER: "@corporate-data-ingestion"
          ASSUME_DURATION: 10800
        run:
          path: sh
          dir: dataworks-behavioural-framework
          args:
            - -exc
            - |
              if [ -f ../previous_success/exit-if-succeeded.sh ]; then
                source ../previous_success/exit-if-succeeded.sh
              fi
              source /assume-role

              cd src/runners
              ./run-ci.sh \
              "../../../meta"
        inputs:
          - name: dataworks-behavioural-framework
          - name: dataworks-aws-corporate-data-ingestion
          - name: meta

    ami-test-results:
      task: ami-test-result
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: ((dataworks.terraform_repository))
            tag: ((dataworks.terraform_version))
        params:
          AWS_DEFAULT_REGION: ((dataworks.aws_region))
          GIT_USERNAME: ((dataworks.concourse_github_username))
          GIT_EMAIL: ((dataworks.concourse_github_email))
          GITHUB_TOKEN: ((dataworks-secrets.concourse_github_pat))
        run:
          path: sh
          args:
            - -exc
            - |
              set +x
              source ./previous_success/exit-if-succeeded.sh

              AMI_ID=$(cat al2-emr-ami/id)
              DATE=$(date -u)
              PIPELINE="$(cat meta/build_pipeline_name)"

              git config --global user.name "${GIT_USERNAME}"
              git config --global user.email "${GIT_EMAIL}"

              git clone https://${GITHUB_TOKEN}:x-oauth-basic@github.com/dwp/ami-builder-configs
              cd ami-builder-configs/results

              echo "$AMI_ID $RESULT" > "$PIPELINE.test"

              git add "$PIPELINE.test"
              git commit -m "Updating $PIPELINE AMI test on ${DATE}"
              git push https://${GITHUB_TOKEN}:x-oauth-basic@github.com/dwp/ami-builder-configs
        inputs:
          - name: meta
          - name: al2-emr-ami
          - name: previous_success

    check-ami-test-results:
      task: check-ami-test-result
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: ((dataworks.terraform_repository))
            tag: ((dataworks.terraform_version))
        params:
          AWS_DEFAULT_REGION: ((dataworks.aws_region))
          GIT_USERNAME: ((dataworks.concourse_github_username))
          GIT_EMAIL: ((dataworks.concourse_github_email))
          GITHUB_TOKEN: ((dataworks-secrets.concourse_github_pat))
        run:
          path: sh
          args:
            - -exc
            - |
              set +x
              PREVIOUS_SUCCESS=false
              AMI_ID=$(cat untested_ami/id)
              DATE=$(date -u)
              PIPELINE="$(cat meta/build_pipeline_name)"
              PATH_TO_RESULTS="ami-builder-configs/results"

              git config --global user.name "${GIT_USERNAME}"
              git config --global user.email "${GIT_EMAIL}"
              git clone https://${GITHUB_TOKEN}:x-oauth-basic@github.com/dwp/ami-builder-configs

              if [ -f "./$PATH_TO_RESULTS/$PIPELINE.test" ]; then
                set +e
                grep "$AMI_ID SUCCESS" "./$PATH_TO_RESULTS/$PIPELINE.test"
                if [ $? -eq 0 ]; then
                  PREVIOUS_SUCCESS=true
                fi
                set -e
              fi

              touch ./previous_success/exit-if-succeeded.sh

              if $PREVIOUS_SUCCESS; then
                 echo 'echo "AMI already passed. Exiting..."; exit 0' > ./previous_success/exit-if-succeeded.sh
              fi

              chmod +x ./previous_success/exit-if-succeeded.sh
        outputs:
          - name: previous_success
        inputs:
          - name: meta
          - name: untested_ami

    rotate-mysql-password:
      task: rotate-mysql-password
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: ((dataworks.docker_awscli_repository))
            version: ((dataworks.docker_awscli_version))
            tag: ((dataworks.docker_awscli_version))
        params:
          AWS_ROLE_ARN: arn:aws:iam::((aws_account.development)):role/ci
          AWS_REGION: ((dataworks.aws_region))
          AWS_DEFAULT_REGION: ((dataworks.aws_region))
          USERNAME: placeholder
          PARAM_NAME: placeholder
          PRIVILEGES: ""
        run:
          path: sh
          args:
            - -exc
            - |
              source /assume-role
              set +x
              jq -n --arg Username "$USERNAME" --arg Paramname "$PARAM_NAME" --arg Privileges "$PRIVILEGES" '{mysql_user_username: $Username, mysql_user_password_secret_name: $Paramname, privileges: $Privileges}' > manifest.json
              echo "Manifest is:"
              cat manifest.json
              aws lambda invoke --function-name manage-hive-metastore-mysql-users-v2 --invocation-type RequestResponse --payload file://manifest.json --cli-connect-timeout 600 --cli-read-timeout 600 output.json
              cat output.json | jq -eC "if .errorMessage? then error(.errorMessage) else true end"

    rotate-corporate-data-ingestion-writer-password:
      .: (( inject meta.plan.rotate-mysql-password ))
      config:
        params:
          USERNAME: "corporate-data-ingestion-writer"
          PARAM_NAME: "metadata-store-v2-corporate-data-ingestion-writer"
          PRIVILEGES: ALL

    python-unit-tests:
      task: python-unit-tests
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: ((dataworks.docker_python_boto_behave_repository))
            version: ((dataworks.docker_python_boto_behave_version))
            tag: ((dataworks.docker_python_boto_behave_version))
        run:
          path: sh
          dir: dataworks-aws-corporate-data-ingestion/steps/
          args:
            - -exc
            - |
              set +x
              apk add openjdk11-jre bash
              pip install pytest pyspark
              python3 -m pytest -vs tests.py
        inputs:
          - name: dataworks-aws-corporate-data-ingestion

    start-corporate-data-ingestion:
      task: start-corporate-data-ingestion
      .: (( inject meta.plan.terraform-common-config ))
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: ((dataworks.docker_awscli_repository))
            version: ((dataworks.docker_awscli_version))
            tag: ((dataworks.docker_awscli_version))
        run:
          path: sh
          args:
            - -exc
            - |
              source /assume-role

              FUNCTION_ARN=$(jq -r ".start_corporate_data_ingestion_arn.value" < ../terraform-output/outputs.json)
              aws lambda invoke --function-name $FUNCTION_ARN --payload "{\"launch_type\": \"manual\"}" --invocation-type Event --cli-connect-timeout 900 --cli-read-timeout 900 output.json

          dir: dataworks-aws-corporate-data-ingestion
        inputs:
          - name: dataworks-aws-corporate-data-ingestion
          - name: terraform-output

    start-backup:
      task: start-backup
      .: (( inject meta.plan.terraform-common-config ))
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: ((dataworks.docker_awscli_repository))
            version: ((dataworks.docker_awscli_version))
            tag: ((dataworks.docker_awscli_version))
        run:
          path: sh
          args:
            - -exc
            - |
              source /assume-role

              FUNCTION_ARN=$(jq -r ".start_backup_arn.value" < ../terraform-output/outputs.json)

              cat <<EOF | tee manifest_configuration.json
              {
                "Spec": {
                  "Format": "S3InventoryReport_CSV_20161130"
                },
                "Location": {
                  "ObjectArn": "arn:aws:s3:::$S3_BACKUP_BUCKET_ID/$MANIFEST_PREFIX",
                  "ETag": "$MANIFEST_ETAG"
                }
              }
              EOF

              cat <<EOF | tee report_configuration.json
              {
                "Bucket": "arn:aws:s3:::$S3_BACKUP_BUCKET_ID",
                "Format": "Report_CSV_20180820",
                "Enabled": true,
                "Prefix": "completion_report/backup_raw_table",
                "ReportScope": "AllTasks"
              }
              EOF

              cat <<EOF | tee batch_operation.json
              {
                "LambdaInvoke": {
                  "FunctionArn": "$FUNCTION_ARN"
                }
              }
              EOF

              aws s3control create-job \
              --account-id "$AWS_ACC" \
              --no-confirmation-required \
              --operation file://batch_operation.json \
              --report file://report_configuration.json \
              --manifest file://manifest_configuration.json \
              --priority 10 \
              --role-arn "arn:aws:iam::$AWS_ACC:role/batch_operation_role" \
              --debug
          dir: dataworks-aws-corporate-data-ingestion
        inputs:
          - name: dataworks-aws-corporate-data-ingestion
          - name: terraform-output
